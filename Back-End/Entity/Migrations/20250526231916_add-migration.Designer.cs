// <auto-generated />
using System;
using Entity.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250526231916_add-migration")]
    partial class addmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Model.Form", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("form", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            id = 1,
                            active = true,
                            description = "Formulario principal del sistema",
                            isdeleted = false,
                            name = "Formulario Principal"
                        },
                        new
                        {
                            id = 2,
                            active = true,
                            description = "Formulario secundario",
                            isdeleted = false,
                            name = "Formulario Secundario"
                        });
                });

            modelBuilder.Entity("Entity.Model.FormModule", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("formid")
                        .HasColumnType("int");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("bit");

                    b.Property<int>("moduleid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("formid");

                    b.HasIndex("moduleid");

                    b.ToTable("formmodule", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            id = 1,
                            formid = 1,
                            isdeleted = false,
                            moduleid = 1
                        },
                        new
                        {
                            id = 2,
                            formid = 2,
                            isdeleted = false,
                            moduleid = 1
                        });
                });

            modelBuilder.Entity("Entity.Model.Log", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StackTrace")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("Log", "Logs");
                });

            modelBuilder.Entity("Entity.Model.Permission", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("permission", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            id = 1,
                            active = true,
                            description = "permiso para leer formularios",
                            isdeleted = false,
                            name = "Leer"
                        },
                        new
                        {
                            id = 2,
                            active = true,
                            description = "permiso para crear formularios",
                            isdeleted = false,
                            name = "Crear"
                        },
                        new
                        {
                            id = 3,
                            active = true,
                            description = "permiso para editar formularios",
                            isdeleted = false,
                            name = "Editar"
                        },
                        new
                        {
                            id = 4,
                            active = true,
                            description = "permiso para eliminar lógicamente formularios",
                            isdeleted = false,
                            name = "Eliminar"
                        },
                        new
                        {
                            id = 5,
                            active = true,
                            description = "permiso para ver formularios eliminados",
                            isdeleted = false,
                            name = "VerEliminados"
                        },
                        new
                        {
                            id = 6,
                            active = true,
                            description = "permiso para recuperar formularios eliminados",
                            isdeleted = false,
                            name = "Recuperar"
                        });
                });

            modelBuilder.Entity("Entity.Model.Person", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("bit");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("phonenumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("id");

                    b.ToTable("person", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            id = 1,
                            active = true,
                            firstname = "Juan",
                            isdeleted = false,
                            lastname = "Pérez",
                            phonenumber = "1234567890"
                        },
                        new
                        {
                            id = 2,
                            active = true,
                            firstname = "Sara",
                            isdeleted = false,
                            lastname = "sofia",
                            phonenumber = "312312314"
                        });
                });

            modelBuilder.Entity("Entity.Model.RolFormPermission", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("formid")
                        .HasColumnType("int");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("bit");

                    b.Property<int>("permissionid")
                        .HasColumnType("int");

                    b.Property<int>("rolid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("formid");

                    b.HasIndex("permissionid");

                    b.HasIndex("rolid");

                    b.ToTable("rolformpermission", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            id = 1,
                            formid = 1,
                            isdeleted = false,
                            permissionid = 1,
                            rolid = 2
                        },
                        new
                        {
                            id = 2,
                            formid = 1,
                            isdeleted = false,
                            permissionid = 2,
                            rolid = 2
                        },
                        new
                        {
                            id = 3,
                            formid = 1,
                            isdeleted = false,
                            permissionid = 3,
                            rolid = 2
                        },
                        new
                        {
                            id = 4,
                            formid = 1,
                            isdeleted = false,
                            permissionid = 4,
                            rolid = 2
                        },
                        new
                        {
                            id = 5,
                            formid = 1,
                            isdeleted = false,
                            permissionid = 1,
                            rolid = 1
                        },
                        new
                        {
                            id = 6,
                            formid = 1,
                            isdeleted = false,
                            permissionid = 2,
                            rolid = 1
                        },
                        new
                        {
                            id = 7,
                            formid = 1,
                            isdeleted = false,
                            permissionid = 3,
                            rolid = 1
                        },
                        new
                        {
                            id = 8,
                            formid = 1,
                            isdeleted = false,
                            permissionid = 4,
                            rolid = 1
                        },
                        new
                        {
                            id = 9,
                            formid = 1,
                            isdeleted = false,
                            permissionid = 5,
                            rolid = 1
                        },
                        new
                        {
                            id = 10,
                            formid = 1,
                            isdeleted = false,
                            permissionid = 6,
                            rolid = 1
                        });
                });

            modelBuilder.Entity("Entity.Model.RolUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("isdeleted")
                        .HasColumnType("bit");

                    b.Property<int>("rolid")
                        .HasColumnType("int");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("rolid");

                    b.HasIndex("userid");

                    b.ToTable("roluser", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            id = 1,
                            isdeleted = false,
                            rolid = 1,
                            userid = 1
                        },
                        new
                        {
                            id = 2,
                            isdeleted = false,
                            rolid = 2,
                            userid = 2
                        });
                });

            modelBuilder.Entity("Entity.Model.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool?>("active")
                        .HasColumnType("bit");

                    b.Property<string>("email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("bit");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("personid")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.HasIndex("personid");

                    b.ToTable("user", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            id = 1,
                            active = true,
                            email = "camilo@gmail.com",
                            isdeleted = false,
                            password = "admin123",
                            personid = 1,
                            username = "camilosada12"
                        },
                        new
                        {
                            id = 2,
                            active = true,
                            email = "sarita@gmail.com",
                            isdeleted = false,
                            password = "sara12312",
                            personid = 2,
                            username = "sara12312"
                        });
                });

            modelBuilder.Entity("Entity.Model.rol", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.ToTable("rol", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            id = 1,
                            description = "Rol con todos los permisos",
                            isdeleted = false,
                            name = "Administrador"
                        },
                        new
                        {
                            id = 2,
                            description = "Rol estándar para usuarios normales",
                            isdeleted = false,
                            name = "Usuario"
                        });
                });

            modelBuilder.Entity("Module", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("module", "ModelSecurity");

                    b.HasData(
                        new
                        {
                            id = 1,
                            active = true,
                            description = "Módulo para administración general",
                            isdeleted = false,
                            name = "Módulo Administrativo"
                        },
                        new
                        {
                            id = 2,
                            active = true,
                            description = "Módulo encargado de generar reportes",
                            isdeleted = false,
                            name = "Módulo de Reportes"
                        });
                });

            modelBuilder.Entity("Entity.Model.FormModule", b =>
                {
                    b.HasOne("Entity.Model.Form", "Form")
                        .WithMany("FormModules")
                        .HasForeignKey("formid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_FormModule_Form");

                    b.HasOne("Module", "Module")
                        .WithMany("FormModules")
                        .HasForeignKey("moduleid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Module_FormModules");

                    b.Navigation("Form");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Entity.Model.RolFormPermission", b =>
                {
                    b.HasOne("Entity.Model.Form", "Form")
                        .WithMany("RolFormPermission")
                        .HasForeignKey("formid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RolFormPermission_Form");

                    b.HasOne("Entity.Model.Permission", "Permission")
                        .WithMany("RolFormPermission")
                        .HasForeignKey("permissionid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RolFormPermission_Permission");

                    b.HasOne("Entity.Model.rol", "Rol")
                        .WithMany("RolFormPermission")
                        .HasForeignKey("rolid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RolFormPermission_Rol");

                    b.Navigation("Form");

                    b.Navigation("Permission");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Entity.Model.RolUser", b =>
                {
                    b.HasOne("Entity.Model.rol", "Rol")
                        .WithMany("RolUser")
                        .HasForeignKey("rolid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RolUser_Rol");

                    b.HasOne("Entity.Model.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RolUser_User");

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Model.User", b =>
                {
                    b.HasOne("Entity.Model.Person", "person")
                        .WithMany("User")
                        .HasForeignKey("personid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Person_User");

                    b.Navigation("person");
                });

            modelBuilder.Entity("Entity.Model.Form", b =>
                {
                    b.Navigation("FormModules");

                    b.Navigation("RolFormPermission");
                });

            modelBuilder.Entity("Entity.Model.Permission", b =>
                {
                    b.Navigation("RolFormPermission");
                });

            modelBuilder.Entity("Entity.Model.Person", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Model.User", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Entity.Model.rol", b =>
                {
                    b.Navigation("RolFormPermission");

                    b.Navigation("RolUser");
                });

            modelBuilder.Entity("Module", b =>
                {
                    b.Navigation("FormModules");
                });
#pragma warning restore 612, 618
        }
    }
}
